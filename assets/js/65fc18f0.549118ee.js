"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[880],{7949:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"installation/team-setup","title":"Team Installation","description":"Setting up CyberArk Agentic Spec Driven Development for your entire team or organization? This guide covers team-wide deployment strategies and shared configuration management.","source":"@site/docs/installation/team-setup.md","sourceDirName":"installation","slug":"/installation/team-setup","permalink":"/cyberark-ai-spec-os/docs/installation/team-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/ChenReuven/cyberark-ai-spec-os/tree/add-docuzarus/docs-website/docs/installation/team-setup.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Manual Installation","permalink":"/cyberark-ai-spec-os/docs/installation/manual"},"next":{"title":"Installation Troubleshooting","permalink":"/cyberark-ai-spec-os/docs/installation/troubleshooting"}}');var a=s(4848),r=s(8453);const i={sidebar_position:4},o="Team Installation",c={},l=[{value:"Team Installation Strategy",id:"team-installation-strategy",level:2},{value:"1. Centralized Standards Approach",id:"1-centralized-standards-approach",level:3},{value:"Create Team Standards Repository",id:"create-team-standards-repository",level:4},{value:"Populate Team Standards",id:"populate-team-standards",level:4},{value:"Team Standards Repository Structure",id:"team-standards-repository-structure",level:4},{value:"2. Team Installation Script",id:"2-team-installation-script",level:3},{value:"3. Standards Synchronization",id:"3-standards-synchronization",level:3},{value:"Team Workflow",id:"team-workflow",level:2},{value:"1. Onboarding New Team Members",id:"1-onboarding-new-team-members",level:3},{value:"2. Updating Team Standards",id:"2-updating-team-standards",level:3},{value:"3. Project Consistency",id:"3-project-consistency",level:3},{value:"Team Standards Management",id:"team-standards-management",level:2},{value:"Version Control Strategy",id:"version-control-strategy",level:3},{value:"Branch Structure",id:"branch-structure",level:4},{value:"Change Process",id:"change-process",level:4},{value:"Team-Specific Customizations",id:"team-specific-customizations",level:3},{value:"Example: Team Tech Stack",id:"example-team-tech-stack",level:4},{value:"Example: Team Code Style",id:"example-team-code-style",level:4},{value:"Integration with Team Tools",id:"integration-with-team-tools",level:3},{value:"Troubleshooting Team Issues",id:"troubleshooting-team-issues",level:2},{value:"Common Team Setup Problems",id:"common-team-setup-problems",level:3},{value:"Team Sync Issues",id:"team-sync-issues",level:3},{value:"Getting Team Help",id:"getting-team-help",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"team-installation",children:"Team Installation"})}),"\n",(0,a.jsx)(n.p,{children:"Setting up CyberArk Agentic Spec Driven Development for your entire team or organization? This guide covers team-wide deployment strategies and shared configuration management."}),"\n",(0,a.jsx)(n.h2,{id:"team-installation-strategy",children:"Team Installation Strategy"}),"\n",(0,a.jsx)(n.h3,{id:"1-centralized-standards-approach",children:"1. Centralized Standards Approach"}),"\n",(0,a.jsx)(n.p,{children:"Create a shared repository for your team's standards and configurations."}),"\n",(0,a.jsx)(n.h4,{id:"create-team-standards-repository",children:"Create Team Standards Repository"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Create a new repository for your team standards\ngit clone https://github.com/your-org/team-agent-os-standards.git\ncd team-agent-os-standards\n\n# Set up the structure\nmkdir -p standards/code-style\nmkdir -p instructions/core\nmkdir -p instructions/meta\nmkdir -p commands\nmkdir -p templates/project\n"})}),"\n",(0,a.jsx)(n.h4,{id:"populate-team-standards",children:"Populate Team Standards"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Copy base standards"})," from CyberArk Agentic Spec Driven Development"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Customize"})," to match your team's preferences"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Add organization-specific"})," guidelines"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version control"})," all changes"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"team-standards-repository-structure",children:"Team Standards Repository Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"team-cyberark-spec-os-standards/\n\u251c\u2500\u2500 standards/\n\u2502   \u251c\u2500\u2500 tech-stack.md          # Your team's tech stack\n\u2502   \u251c\u2500\u2500 code-style.md          # Team coding standards\n\u2502   \u251c\u2500\u2500 best-practices.md      # Team development practices\n\u2502   \u2514\u2500\u2500 code-style/\n\u2502       \u251c\u2500\u2500 typescript-style.md\n\u2502       \u251c\u2500\u2500 react-style.md\n\u2502       \u2514\u2500\u2500 python-style.md\n\u251c\u2500\u2500 instructions/\n\u2502   \u251c\u2500\u2500 core/                  # Customized workflow instructions\n\u2502   \u2514\u2500\u2500 meta/                  # Team-specific meta instructions\n\u251c\u2500\u2500 commands/                  # Team workflow commands\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 project/               # Project template files\n\u2502   \u2514\u2500\u2500 specs/                 # Spec templates\n\u2514\u2500\u2500 scripts/\n    \u251c\u2500\u2500 team-install.sh        # Team installation script\n    \u2514\u2500\u2500 sync-standards.sh      # Standards sync script\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-team-installation-script",children:"2. Team Installation Script"}),"\n",(0,a.jsx)(n.p,{children:"Create a team-specific installation script:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# team-install.sh\n#!/bin/bash\n\nset -e\n\nTEAM_REPO="https://github.com/your-org/team-cyberark-spec-os-standards.git"\nTEAM_STANDARDS_DIR="$HOME/.cyberark-spec-os-team"\nBASE_DIR="$HOME/.cyberark-spec-os"\n\necho "Installing CyberArk Agentic Spec Driven Development with team standards..."\n\n# Install base CyberArk Agentic Spec Driven Development first\nif [ ! -d "$BASE_DIR" ]; then\n    echo "Installing base CyberArk Agentic Spec Driven Development..."\n    curl -sSL https://raw.githubusercontent.com/ChenReuven/cyberark-ai-spec-os/master/setup/base.sh | bash -s -- --claude-code --cursor\nfi\n\n# Clone team standards\nif [ ! -d "$TEAM_STANDARDS_DIR" ]; then\n    echo "Cloning team standards..."\n    git clone "$TEAM_REPO" "$TEAM_STANDARDS_DIR"\nelse\n    echo "Updating team standards..."\n    cd "$TEAM_STANDARDS_DIR"\n    git pull origin main\nfi\n\n# Sync team standards to base installation\necho "Syncing team standards..."\ncp -r "$TEAM_STANDARDS_DIR/standards/"* "$BASE_DIR/standards/"\ncp -r "$TEAM_STANDARDS_DIR/instructions/"* "$BASE_DIR/instructions/"\ncp -r "$TEAM_STANDARDS_DIR/commands/"* "$BASE_DIR/commands/"\n\n# Update config to indicate team installation\ncat > "$BASE_DIR/config.yml" << EOF\nversion: "1.0.0"\ninstallation_type: "team"\nteam_repo: "$TEAM_REPO"\ninstalled_date: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"\nlast_sync: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"\ntools:\n  - claude-code\n  - cursor\nbase_path: "$BASE_DIR"\nteam_path: "$TEAM_STANDARDS_DIR"\nEOF\n\necho "\u2705 Team installation complete!"\necho "\ud83d\udd04 Use \'sync-standards.sh\' to get latest team updates"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-standards-synchronization",children:"3. Standards Synchronization"}),"\n",(0,a.jsx)(n.p,{children:"Create a sync script for team members:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# sync-standards.sh\n#!/bin/bash\n\nTEAM_STANDARDS_DIR="$HOME/.cyberark-spec-os-team"\nBASE_DIR="$HOME/.cyberark-spec-os"\n\nif [ ! -d "$TEAM_STANDARDS_DIR" ]; then\n    echo "\u274c Team standards not found. Run team-install.sh first."\n    exit 1\nfi\n\necho "\ud83d\udd04 Syncing team standards..."\n\ncd "$TEAM_STANDARDS_DIR"\ngit pull origin main\n\n# Backup local customizations\nif [ -d "$BASE_DIR/standards.local" ]; then\n    echo "\ud83d\udce6 Backing up local customizations..."\n    cp -r "$BASE_DIR/standards.local" "$BASE_DIR/standards.local.backup.$(date +%Y%m%d_%H%M%S)"\nfi\n\n# Sync team standards\ncp -r "$TEAM_STANDARDS_DIR/standards/"* "$BASE_DIR/standards/"\ncp -r "$TEAM_STANDARDS_DIR/instructions/"* "$BASE_DIR/instructions/"\ncp -r "$TEAM_STANDARDS_DIR/commands/"* "$BASE_DIR/commands/"\n\n# Update config\nsed -i.bak "s/last_sync: .*/last_sync: \\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\\"/" "$BASE_DIR/config.yml"\n\necho "\u2705 Standards synchronized!"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"team-workflow",children:"Team Workflow"}),"\n",(0,a.jsx)(n.h3,{id:"1-onboarding-new-team-members",children:"1. Onboarding New Team Members"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Send new team members this command\ncurl -sSL https://your-org.github.io/team-cyberark-spec-os/install.sh | bash\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-updating-team-standards",children:"2. Updating Team Standards"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Make changes"})," to team standards repository"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create pull request"})," for review"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Merge approved changes"})}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Team members sync"})," using ",(0,a.jsx)(n.code,{children:"sync-standards.sh"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-project-consistency",children:"3. Project Consistency"}),"\n",(0,a.jsx)(n.p,{children:"Ensure all team projects use consistent setup:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Enhanced project installation for teams\n#!/bin/bash\n\nPROJECT_DIR="$(pwd)"\nBASE_DIR="$HOME/.agent-os"\nTEAM_STANDARDS_DIR="$HOME/.agent-os-team"\n\necho "Setting up project with team standards..."\n\n# Standard project setup\n~/.cyberark-spec-os/setup/project.sh\n\n# Apply team-specific project templates\nif [ -d "$TEAM_STANDARDS_DIR/templates/project" ]; then\n    cp -r "$TEAM_STANDARDS_DIR/templates/project/"* .cyberark-spec-os/\nfi\n\n# Create team-specific project config\ncat >> .cyberark-spec-os/config.yml << EOF\nteam_installation: true\nteam_repo: "$(grep team_repo $BASE_DIR/config.yml | cut -d\' \' -f2-)"\nproject_template_version: "$(cd $TEAM_STANDARDS_DIR && git rev-parse HEAD)"\nEOF\n\necho "\u2705 Project configured with team standards!"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"team-standards-management",children:"Team Standards Management"}),"\n",(0,a.jsx)(n.h3,{id:"version-control-strategy",children:"Version Control Strategy"}),"\n",(0,a.jsx)(n.h4,{id:"branch-structure",children:"Branch Structure"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"main"})," - Stable team standards"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"develop"})," - Integration branch for new changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"feature/xyz"})," - Individual standard updates"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"change-process",children:"Change Process"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create feature branch"})," for standards changes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Update relevant files"})," (standards, instructions, etc.)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Test changes"})," on sample projects"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create pull request"})," with detailed description"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Team review"})," and approval"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Merge to main"})," and tag release"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Team sync"})," new standards"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"team-specific-customizations",children:"Team-Specific Customizations"}),"\n",(0,a.jsx)(n.h4,{id:"example-team-tech-stack",children:"Example: Team Tech Stack"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"# Team Tech Stack\n\n## Frontend\n- **Framework**: React 18+\n- **Language**: TypeScript 5.0+\n- **Styling**: Tailwind CSS\n- **Testing**: Vitest + React Testing Library\n- **Build**: Vite\n\n## Backend\n- **Framework**: Node.js + Express\n- **Language**: TypeScript 5.0+\n- **Database**: PostgreSQL 15+\n- **ORM**: Prisma\n- **Testing**: Vitest + Supertest\n\n## DevOps\n- **CI/CD**: GitHub Actions\n- **Deployment**: Docker + Kubernetes\n- **Monitoring**: Datadog\n- **Error Tracking**: Sentry\n\n## AI Development\n- **Primary Tool**: Claude Code\n- **Secondary**: Cursor\n- **Spec System**: CyberArk AI Spec OS\n"})}),"\n",(0,a.jsx)(n.h4,{id:"example-team-code-style",children:"Example: Team Code Style"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:"# Team Code Style\n\n## General Principles\n- **Clarity over cleverness**\n- **Consistent naming conventions**\n- **Comprehensive documentation**\n- **Test-driven development**\n\n## TypeScript Standards\n- Use strict TypeScript configuration\n- Prefer explicit types over `any`\n- Use interface over type for object shapes\n- Follow React functional component patterns\n\n## File Organization\n"})}),"\n",(0,a.jsxs)(n.p,{children:["src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ui/           # Reusable UI components\n\u2502   \u251c\u2500\u2500 forms/        # Form components\n\u2502   \u2514\u2500\u2500 layout/       # Layout components\n\u251c\u2500\u2500 hooks/            # Custom React hooks\n\u251c\u2500\u2500 services/         # API and business logic\n\u251c\u2500\u2500 utils/            # Utility functions\n\u251c\u2500\u2500 types/            # TypeScript type definitions\n\u2514\u2500\u2500 ",(0,a.jsx)(n.strong,{children:"tests"}),"/        # Test files"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\n## Deployment Strategies\n\n### 1. Gradual Rollout\n\n1. **Pilot team** tests new standards\n2. **Feedback collection** and iteration\n3. **Department rollout** with training\n4. **Organization-wide** deployment\n\n### 2. Training and Documentation\n\n- **Internal documentation** for team-specific processes\n- **Training sessions** for new workflows\n- **Best practices sharing** sessions\n- **Regular review** and improvement cycles\n\n### 3. Monitoring and Metrics\n\nTrack team adoption and effectiveness:\n\n- **Installation completion** rates\n- **Standards compliance** in code reviews\n- **Development velocity** improvements\n- **Quality metrics** (bugs, technical debt)\n\n## Support and Maintenance\n\n### Team Support Structure\n\n1. **CyberArk AI Spec OS Champion** - Internal expert and trainer\n2. **Standards Committee** - Reviews and approves changes\n3. **Support Channel** - Slack/Teams channel for questions\n4. **Regular Reviews** - Monthly standards review meetings\n\n### Maintenance Tasks\n\n- **Weekly**: Monitor team sync status\n- **Monthly**: Review and update standards\n- **Quarterly**: Assess effectiveness and improvements\n- **Annually**: Major version updates and strategy review\n\n## Advanced Team Features\n\n### Custom Commands\n\nCreate team-specific workflow commands:\n\n```bash\n# .cyberark-spec-os/commands/team-deploy.md\n# Team Deployment Command\n\nThis command handles our team's specific deployment workflow:\n\n1. Run full test suite\n2. Update version numbers\n3. Generate changelog\n4. Deploy to staging\n5. Run integration tests\n6. Deploy to production (with approval)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"integration-with-team-tools",children:"Integration with Team Tools"}),"\n",(0,a.jsx)(n.p,{children:"Connect CyberArk AI Spec OS with your team's existing tools:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Jira/Linear"})," integration for spec tracking"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Slack/Teams"})," notifications for spec updates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GitHub/GitLab"})," templates and workflows"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CI/CD"})," pipeline integration"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting-team-issues",children:"Troubleshooting Team Issues"}),"\n",(0,a.jsx)(n.h3,{id:"common-team-setup-problems",children:"Common Team Setup Problems"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Inconsistent installations"})," - Use team installation script"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Outdated standards"})," - Regular sync reminders"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Local overrides"})," - Clear override policies"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tool conflicts"})," - Standardize tool versions"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"team-sync-issues",children:"Team Sync Issues"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Force sync all team standards\nrm -rf ~/.cyberark-spec-os/standards\nsync-standards.sh --force\n"})}),"\n",(0,a.jsx)(n.h3,{id:"getting-team-help",children:"Getting Team Help"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Internal team documentation"}),"\n",(0,a.jsx)(n.li,{children:"CyberArk AI Spec OS community"}),"\n",(0,a.jsx)(n.li,{children:"Team standards repository issues"}),"\n",(0,a.jsx)(n.li,{children:"Regular team office hours"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);